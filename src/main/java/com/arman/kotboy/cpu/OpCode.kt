package com.arman.kotboy.cpu

import com.arman.kotboy.cpu.Operand.Type.*

enum class OpCode(
    val mnemonic: String,
    val opcode: Int,
    val bytes: Int,
    val cycles: Int,
    vararg val args: Operand.Type,
    val cyclesNotTaken: Int = cycles
) {

    // opcodes
    NOP_00("NOP", 0x00, 1, 4),
    LD_01("LD BC,d16", 0x01, 3, 12, d16),
    LD_02("LD (BC),A", 0x02, 1, 8),
    INC_03("INC BC", 0x03, 1, 8),
    INC_04("INC B", 0x04, 1, 4),
    DEC_05("DEC B", 0x05, 1, 4),
    LD_06("LD B,d8", 0x06, 2, 8, d8),
    RLCA_07("RLCA", 0x07, 1, 4),
    LD_08("LD (a16),SP", 0x08, 3, 20, a16),
    ADD_09("ADD HL,BC", 0x09, 1, 8),
    LD_0A("LD A,(BC)", 0x0A, 1, 8),
    DEC_0B("DEC BC", 0x0B, 1, 8),
    INC_0C("INC C", 0x0C, 1, 4),
    DEC_0D("DEC C", 0x0D, 1, 4),
    LD_0E("LD C,d8", 0x0E, 2, 8, d8),
    RRCA_0F("RRCA", 0x0F, 1, 4),

    STOP_10("STOP 0", 0x10, 2, 4, UNDEFINED),
    LD_11("LD DE,d16", 0x11, 3, 12, d16),
    LD_12("LD (DE),A", 0x12, 1, 8),
    INC_13("INC DE", 0x13, 1, 8),
    INC_14("INC D", 0x14, 1, 4),
    DEC_15("DEC D", 0x15, 1, 4),
    LD_16("LD D,d8", 0x16, 2, 8, d8),
    RLA_17("RLA", 0x17, 1, 4),
    JR_18("JR r8", 0x18, 2, 12, r8),
    ADD_19("ADD HL,DE", 0x19, 1, 8),
    LD_1A("LD A,(DE)", 0x1A, 1, 8),
    DEC_1B("DEC DE", 0x1B, 1, 8),
    INC_1C("INC E", 0x1C, 1, 4),
    DEC_1D("DEC E", 0x1D, 1, 4),
    LD_1E("LD E,d8", 0x1E, 2, 8, d8),
    RRA_1F("RRA", 0x1F, 1, 4),

    JR_20("JR NZ,r8", 0x20, 2, 12, r8, cyclesNotTaken = 8),
    LD_21("LD HL,d16", 0x21, 3, 12, d16),
    LD_22("LD (HL+),A", 0x22, 1, 8),
    INC_23("INC HL", 0x23, 1, 8),
    INC_24("INC H", 0x24, 1, 4),
    DEC_25("DEC H", 0x25, 1, 4),
    LD_26("LD H,d8", 0x26, 2, 8, d8),
    DAA_27("DAA", 0x27, 1, 4),
    JR_28("JR Z,r8", 0x28, 2, 12, r8, cyclesNotTaken = 8),
    ADD_29("ADD HL,HL", 0x29, 1, 8),
    LD_2A("LD A,(HL+)", 0x2A, 1, 8),
    DEC_2B("DEC HL", 0x2B, 1, 8),
    INC_2C("INC L", 0x2C, 1, 4),
    DEC_2D("DEC L", 0x2D, 1, 4),
    LD_2E("LD L,d8", 0x2E, 2, 8, d8),
    CPL_2F("CPL", 0x2F, 1, 4),

    JR_30("JR NC,r8", 0x30, 2, 12, r8, cyclesNotTaken = 8),
    LD_31("LD SP,d16", 0x31, 3, 12, d16),
    LD_32("LD (HL-),A", 0x32, 1, 8),
    INC_33("INC SP", 0x33, 1, 8),
    INC_34("INC (HL)", 0x34, 1, 12),
    DEC_35("DEC (HL)", 0x35, 1, 12),
    LD_36("LD (HL),d8", 0x36, 2, 12, d8),
    SCF_37("SCF", 0x37, 1, 4),
    JR_38("JR C,r8", 0x38, 2, 12, r8, cyclesNotTaken = 8),
    ADD_39("ADD HL,SP", 0x39, 1, 8),
    LD_3A("LD A,(HL-)", 0x3A, 1, 8),
    DEC_3B("DEC SP", 0x3B, 1, 8),
    INC_3C("INC A", 0x3C, 1, 4),
    DEC_3D("DEC A", 0x3D, 1, 4),
    LD_3E("LD A,d8", 0x3E, 2, 8, d8),
    CCF_3F("CCF", 0x3F, 1, 4),

    LD_40("LD B,B", 0x40, 1, 4),
    LD_41("LD B,C", 0x41, 1, 4),
    LD_42("LD B,D", 0x42, 1, 4),
    LD_43("LD B,E", 0x43, 1, 4),
    LD_44("LD B,H", 0x44, 1, 4),
    LD_45("LD B,L", 0x45, 1, 4),
    LD_46("LD B,(HL)", 0x46, 1, 8),
    LD_47("LD B,A", 0x47, 1, 4),
    LD_48("LD C,B", 0x48, 1, 4),
    LD_49("LD C,C", 0x49, 1, 4),
    LD_4A("LD C,D", 0x4A, 1, 4),
    LD_4B("LD C,E", 0x4B, 1, 4),
    LD_4C("LD C,H", 0x4C, 1, 4),
    LD_4D("LD C,L", 0x4D, 1, 4),
    LD_4E("LD C,(HL)", 0x4E, 1, 8),
    LD_4F("LD C,A", 0x4F, 1, 4),

    LD_50("LD D,B", 0x50, 1, 4),
    LD_51("LD D,C", 0x51, 1, 4),
    LD_52("LD D,D", 0x52, 1, 4),
    LD_53("LD D,E", 0x53, 1, 4),
    LD_54("LD D,H", 0x54, 1, 4),
    LD_55("LD D,L", 0x55, 1, 4),
    LD_56("LD D,(HL)", 0x56, 1, 8),
    LD_57("LD D,A", 0x57, 1, 4),
    LD_58("LD E,B", 0x58, 1, 4),
    LD_59("LD E,C", 0x59, 1, 4),
    LD_5A("LD E,D", 0x5A, 1, 4),
    LD_5B("LD E,E", 0x5B, 1, 4),
    LD_5C("LD E,H", 0x5C, 1, 4),
    LD_5D("LD E,L", 0x5D, 1, 4),
    LD_5E("LD E,(HL)", 0x5E, 1, 8),
    LD_5F("LD E,A", 0x5F, 1, 4),

    LD_60("LD H,B", 0x60, 1, 4),
    LD_61("LD H,C", 0x61, 1, 4),
    LD_62("LD H,D", 0x62, 1, 4),
    LD_63("LD H,E", 0x63, 1, 4),
    LD_64("LD H,H", 0x64, 1, 4),
    LD_65("LD H,L", 0x65, 1, 4),
    LD_66("LD H,(HL)", 0x66, 1, 8),
    LD_67("LD H,A", 0x67, 1, 4),
    LD_68("LD L,B", 0x68, 1, 4),
    LD_69("LD L,C", 0x69, 1, 4),
    LD_6A("LD L,D", 0x6A, 1, 4),
    LD_6B("LD L,E", 0x6B, 1, 4),
    LD_6C("LD L,H", 0x6C, 1, 4),
    LD_6D("LD L,L", 0x6D, 1, 4),
    LD_6E("LD L,(HL)", 0x6E, 1, 8),
    LD_6F("LD L,A", 0x6F, 1, 4),

    LD_70("LD (HL),B", 0x70, 1, 8),
    LD_71("LD (HL),C", 0x71, 1, 8),
    LD_72("LD (HL),D", 0x72, 1, 8),
    LD_73("LD (HL),E", 0x73, 1, 8),
    LD_74("LD (HL),H", 0x74, 1, 8),
    LD_75("LD (HL),L", 0x75, 1, 8),
    HALT_76("HALT", 0x76, 1, 4),
    LD_77("LD (HL),A", 0x77, 1, 8),
    LD_78("LD A,B", 0x78, 1, 4),
    LD_79("LD A,C", 0x79, 1, 4),
    LD_7A("LD A,D", 0x7A, 1, 4),
    LD_7B("LD A,E", 0x7B, 1, 4),
    LD_7C("LD A,H", 0x7C, 1, 4),
    LD_7D("LD A,L", 0x7D, 1, 4),
    LD_7E("LD A,(HL)", 0x7E, 1, 8),
    LD_7F("LD A,A", 0x7F, 1, 4),

    ADD_80("ADD A,B", 0x80, 1, 4),
    ADD_81("ADD A,C", 0x81, 1, 4),
    ADD_82("ADD A,D", 0x82, 1, 4),
    ADD_83("ADD A,E", 0x83, 1, 4),
    ADD_84("ADD A,H", 0x84, 1, 4),
    ADD_85("ADD A,L", 0x85, 1, 4),
    ADD_86("ADD A,(HL)", 0x86, 1, 8),
    ADD_87("ADD A,A", 0x87, 1, 4),
    ADC_88("ADC A,B", 0x88, 1, 4),
    ADC_89("ADC A,C", 0x89, 1, 4),
    ADC_8A("ADC A,D", 0x8A, 1, 4),
    ADC_8B("ADC A,E", 0x8B, 1, 4),
    ADC_8C("ADC A,H", 0x8C, 1, 4),
    ADC_8D("ADC A,L", 0x8D, 1, 4),
    ADC_8E("ADC A,(HL)", 0x8E, 1, 8),
    ADC_8F("ADC A,A", 0x8F, 1, 4),

    SUB_90("SUB B", 0x90, 1, 4),
    SUB_91("SUB C", 0x91, 1, 4),
    SUB_92("SUB D", 0x92, 1, 4),
    SUB_93("SUB E", 0x93, 1, 4),
    SUB_94("SUB H", 0x94, 1, 4),
    SUB_95("SUB L", 0x95, 1, 4),
    SUB_96("SUB (HL)", 0x96, 1, 8),
    SUB_97("SUB A", 0x97, 1, 4),
    SBC_98("SBC A,B", 0x98, 1, 4),
    SBC_99("SBC A,C", 0x99, 1, 4),
    SBC_9A("SBC A,D", 0x9A, 1, 4),
    SBC_9B("SBC A,E", 0x9B, 1, 4),
    SBC_9C("SBC A,H", 0x9C, 1, 4),
    SBC_9D("SBC A,L", 0x9D, 1, 4),
    SBC_9E("SBC A,(HL)", 0x9E, 1, 8),
    SBC_9F("SBC A,A", 0x9F, 1, 4),

    AND_A0("AND B", 0xA0, 1, 4),
    AND_A1("AND C", 0xA1, 1, 4),
    AND_A2("AND D", 0xA2, 1, 4),
    AND_A3("AND E", 0xA3, 1, 4),
    AND_A4("AND H", 0xA4, 1, 4),
    AND_A5("AND L", 0xA5, 1, 4),
    AND_A6("AND (HL)", 0xA6, 1, 8),
    AND_A7("AND A", 0xA7, 1, 4),
    XOR_A8("XOR B", 0xA8, 1, 4),
    XOR_A9("XOR C", 0xA9, 1, 4),
    XOR_AA("XOR D", 0xAA, 1, 4),
    XOR_AB("XOR E", 0xAB, 1, 4),
    XOR_AC("XOR H", 0xAC, 1, 4),
    XOR_AD("XOR L", 0xAD, 1, 4),
    XOR_AE("XOR (HL)", 0xAE, 1, 8),
    XOR_AF("XOR A", 0xAF, 1, 4),

    OR_B0("OR B", 0xB0, 1, 4),
    OR_B1("OR C", 0xB1, 1, 4),
    OR_B2("OR D", 0xB2, 1, 4),
    OR_B3("OR E", 0xB3, 1, 4),
    OR_B4("OR H", 0xB4, 1, 4),
    OR_B5("OR L", 0xB5, 1, 4),
    OR_B6("OR (HL)", 0xB6, 1, 8),
    OR_B7("OR A", 0xB7, 1, 4),
    CP_B8("CP B", 0xB8, 1, 4),
    CP_B9("CP C", 0xB9, 1, 4),
    CP_BA("CP D", 0xBA, 1, 4),
    CP_BB("CP E", 0xBB, 1, 4),
    CP_BC("CP H", 0xBC, 1, 4),
    CP_BD("CP L", 0xBD, 1, 4),
    CP_BE("CP (HL)", 0xBE, 1, 8),
    CP_BF("CP A", 0xBF, 1, 4),

    RET_C0("RET NZ", 0xC0, 1, 20, cyclesNotTaken = 8),
    POP_C1("POP BC", 0xC1, 1, 12),
    JP_C2("JP NZ,a16", 0xC2, 3, 16, a16, cyclesNotTaken = 12),
    JP_C3("JP a16", 0xC3, 3, 16, a16),
    CALL_C4("CALL NZ,a16", 0xC4, 3, 24, a16, cyclesNotTaken = 12),
    PUSH_C5("PUSH BC", 0xC5, 1, 16),
    ADD_C6("ADD A,d8", 0xC6, 2, 8, d8),
    RST_C7("RST 00H", 0xC7, 1, 16),
    RET_C8("RET Z", 0xC8, 1, 20, cyclesNotTaken = 8),
    RET_C9("RET", 0xC9, 1, 16),
    JP_CA("JP Z,a16", 0xCA, 3, 16, a16, cyclesNotTaken = 12),
    PREFIX_CB("PREFIX CB", 0xCB, 1, 0),
    CALL_CC("CALL Z,a16", 0xCC, 3, 24, a16, cyclesNotTaken = 12),
    CALL_CD("CALL a16", 0xCD, 3, 24, a16),
    ADC_CE("ADC A,d8", 0xCE, 2, 8, d8),
    RST_CF("RST 08H", 0xCF, 1, 16),

    RET_D0("RET NC", 0xD0, 1, 20, cyclesNotTaken = 8),
    POP_D1("POP DE", 0xD1, 1, 12),
    JP_D2("JP NC,a16", 0xD2, 3, 16, a16, cyclesNotTaken = 12),
    __D3("", 0xD3, 0, 0),
    CALL_D4("CALL NC,a16", 0xD4, 3, 24, a16, cyclesNotTaken = 12),
    PUSH_D5("PUSH DE", 0xD5, 1, 16),
    SUB_D6("SUB d8", 0xD6, 2, 8, d8),
    RST_D7("RST 10H", 0xD7, 1, 16),
    RET_D8("RET C", 0xD8, 1, 20, cyclesNotTaken = 8),
    RETI_D9("RETI", 0xD9, 1, 16),
    JP_DA("JP C,a16", 0xDA, 3, 16, a16, cyclesNotTaken = 12),
    __DB("", 0xDB, 0, 0),
    CALL_DC("CALL C,a16", 0xDC, 3, 24, a16, cyclesNotTaken = 12),
    __DD("", 0xDD, 0, 0),
    SBC_DE("SBC A,d8", 0xDE, 2, 8, d8),
    RST_DF("RST 18H", 0xDF, 1, 16),

    LDH_E0("LDH (a8),A", 0xE0, 2, 12, a8),
    POP_E1("POP HL", 0xE1, 1, 12),
    LD_E2("LD (C),A", 0xE2, 1, 8),
    __E3("", 0xE3, 0, 0),
    __E4("", 0xE4, 0, 0),
    PUSH_E5("PUSH HL", 0xE5, 1, 16),
    AND_E6("AND d8", 0xE6, 2, 8, d8),
    RST_E7("RST 20H", 0xE7, 1, 16),
    ADD_E8("ADD SP,r8", 0xE8, 2, 16, r8),
    JP_E9("JP (HL)", 0xE9, 1, 4),
    LD_EA("LD (a16),A", 0xEA, 3, 16, a16),
    __EB("", 0xEB, 0, 0),
    __EC("", 0xEC, 0, 0),
    __ED("", 0xED, 0, 0),
    XOR_EE("XOR d8", 0xEE, 2, 8, d8),
    RST_EF("RST 28H", 0xEF, 1, 16),

    LDH_F0("LDH A,(a8)", 0xF0, 2, 12, a8),
    POP_F1("POP AF", 0xF1, 1, 12),
    LD_F2("LD A,(C)", 0xF2, 1, 8),
    DI_F3("DI", 0xF3, 1, 4),
    __F4("", 0xF4, 0, 0),
    PUSH_F5("PUSH AF", 0xF5, 1, 16),
    OR_F6("OR d8", 0xF6, 2, 8, d8),
    RST_F7("RST 30H", 0xF7, 1, 16),
    LD_F8("LD HL,SP+r8", 0xF8, 2, 12, r8),
    LD_F9("LD SP,HL", 0xF9, 1, 8),
    LD_FA("LD A,(a16)", 0xFA, 3, 16, a16),
    EI_FB("EI", 0xFB, 1, 4),
    __FC("", 0xFC, 0, 0),
    __FD("", 0xFD, 0, 0),
    CP_FE("CP d8", 0xFE, 2, 8, d8),
    RST_FF("RST 38H", 0xFF, 1, 16),


    // external opcodes
    RLC_00("RLC B", 0x00, 2, 8),
    RLC_01("RLC C", 0x01, 2, 8),
    RLC_02("RLC D", 0x02, 2, 8),
    RLC_03("RLC E", 0x03, 2, 8),
    RLC_04("RLC H", 0x04, 2, 8),
    RLC_05("RLC L", 0x05, 2, 8),
    RLC_06("RLC (HL)", 0x06, 2, 16),
    RLC_07("RLC A", 0x07, 2, 8),
    RRC_08("RRC B", 0x08, 2, 8),
    RRC_09("RRC C", 0x09, 2, 8),
    RRC_0A("RRC D", 0x0A, 2, 8),
    RRC_0B("RRC E", 0x0B, 2, 8),
    RRC_0C("RRC H", 0x0C, 2, 8),
    RRC_0D("RRC L", 0x0D, 2, 8),
    RRC_0E("RRC (HL)", 0x0E, 2, 16),
    RRC_0F("RRC A", 0x0F, 2, 8),

    RL_10("RL B", 0x10, 2, 8),
    RL_11("RL C", 0x11, 2, 8),
    RL_12("RL D", 0x12, 2, 8),
    RL_13("RL E", 0x13, 2, 8),
    RL_14("RL H", 0x14, 2, 8),
    RL_15("RL L", 0x15, 2, 8),
    RL_16("RL (HL)", 0x16, 2, 16),
    RL_17("RL A", 0x17, 2, 8),
    RR_18("RR B", 0x18, 2, 8),
    RR_19("RR C", 0x19, 2, 8),
    RR_1A("RR D", 0x1A, 2, 8),
    RR_1B("RR E", 0x1B, 2, 8),
    RR_1C("RR H", 0x1C, 2, 8),
    RR_1D("RR L", 0x1D, 2, 8),
    RR_1E("RR (HL)", 0x1E, 2, 16),
    RR_1F("RR A", 0x1F, 2, 8),

    SLA_20("SLA B", 0x20, 2, 8),
    SLA_21("SLA C", 0x21, 2, 8),
    SLA_22("SLA D", 0x22, 2, 8),
    SLA_23("SLA E", 0x23, 2, 8),
    SLA_24("SLA H", 0x24, 2, 8),
    SLA_25("SLA L", 0x25, 2, 8),
    SLA_26("SLA (HL)", 0x26, 2, 16),
    SLA_27("SLA A", 0x27, 2, 8),
    SRA_28("SRA B", 0x28, 2, 8),
    SRA_29("SRA C", 0x29, 2, 8),
    SRA_2A("SRA D", 0x2A, 2, 8),
    SRA_2B("SRA E", 0x2B, 2, 8),
    SRA_2C("SRA H", 0x2C, 2, 8),
    SRA_2D("SRA L", 0x2D, 2, 8),
    SRA_2E("SRA (HL)", 0x2E, 2, 16),
    SRA_2F("SRA A", 0x2F, 2, 8),

    SWAP_30("SWAP B", 0x30, 2, 8),
    SWAP_31("SWAP C", 0x31, 2, 8),
    SWAP_32("SWAP D", 0x32, 2, 8),
    SWAP_33("SWAP E", 0x33, 2, 8),
    SWAP_34("SWAP H", 0x34, 2, 8),
    SWAP_35("SWAP L", 0x35, 2, 8),
    SWAP_36("SWAP (HL)", 0x36, 2, 16),
    SWAP_37("SWAP A", 0x37, 2, 8),
    SRL_38("SRL B", 0x38, 2, 8),
    SRL_39("SRL C", 0x39, 2, 8),
    SRL_3A("SRL D", 0x3A, 2, 8),
    SRL_3B("SRL E", 0x3B, 2, 8),
    SRL_3C("SRL H", 0x3C, 2, 8),
    SRL_3D("SRL L", 0x3D, 2, 8),
    SRL_3E("SRL (HL)", 0x3E, 2, 16),
    SRL_3F("SRL A", 0x3F, 2, 8),

    BIT_40("BIT 0,B", 0x40, 2, 8),
    BIT_41("BIT 0,C", 0x41, 2, 8),
    BIT_42("BIT 0,D", 0x42, 2, 8),
    BIT_43("BIT 0,E", 0x43, 2, 8),
    BIT_44("BIT 0,H", 0x44, 2, 8),
    BIT_45("BIT 0,L", 0x45, 2, 8),
    BIT_46("BIT 0,(HL)", 0x46, 2, 12),
    BIT_47("BIT 0,A", 0x47, 2, 8),
    BIT_48("BIT 1,B", 0x48, 2, 8),
    BIT_49("BIT 1,C", 0x49, 2, 8),
    BIT_4A("BIT 1,D", 0x4A, 2, 8),
    BIT_4B("BIT 1,E", 0x4B, 2, 8),
    BIT_4C("BIT 1,H", 0x4C, 2, 8),
    BIT_4D("BIT 1,L", 0x4D, 2, 8),
    BIT_4E("BIT 1,(HL)", 0x4E, 2, 12),
    BIT_4F("BIT 1,A", 0x4F, 2, 8),

    BIT_50("BIT 2,B", 0x50, 2, 8),
    BIT_51("BIT 2,C", 0x51, 2, 8),
    BIT_52("BIT 2,D", 0x52, 2, 8),
    BIT_53("BIT 2,E", 0x53, 2, 8),
    BIT_54("BIT 2,H", 0x54, 2, 8),
    BIT_55("BIT 2,L", 0x55, 2, 8),
    BIT_56("BIT 2,(HL)", 0x56, 2, 12),
    BIT_57("BIT 2,A", 0x57, 2, 8),
    BIT_58("BIT 3,B", 0x58, 2, 8),
    BIT_59("BIT 3,C", 0x59, 2, 8),
    BIT_5A("BIT 3,D", 0x5A, 2, 8),
    BIT_5B("BIT 3,E", 0x5B, 2, 8),
    BIT_5C("BIT 3,H", 0x5C, 2, 8),
    BIT_5D("BIT 3,L", 0x5D, 2, 8),
    BIT_5E("BIT 3,(HL)", 0x5E, 2, 12),
    BIT_5F("BIT 3,A", 0x5F, 2, 8),

    BIT_60("BIT 4,B", 0x60, 2, 8),
    BIT_61("BIT 4,C", 0x61, 2, 8),
    BIT_62("BIT 4,D", 0x62, 2, 8),
    BIT_63("BIT 4,E", 0x63, 2, 8),
    BIT_64("BIT 4,H", 0x64, 2, 8),
    BIT_65("BIT 4,L", 0x65, 2, 8),
    BIT_66("BIT 4,(HL)", 0x66, 2, 12),
    BIT_67("BIT 4,A", 0x67, 2, 8),
    BIT_68("BIT 5,B", 0x68, 2, 8),
    BIT_69("BIT 5,C", 0x69, 2, 8),
    BIT_6A("BIT 5,D", 0x6A, 2, 8),
    BIT_6B("BIT 5,E", 0x6B, 2, 8),
    BIT_6C("BIT 5,H", 0x6C, 2, 8),
    BIT_6D("BIT 5,L", 0x6D, 2, 8),
    BIT_6E("BIT 5,(HL)", 0x6E, 2, 12),
    BIT_6F("BIT 5,A", 0x6F, 2, 8),

    BIT_70("BIT 6,B", 0x70, 2, 8),
    BIT_71("BIT 6,C", 0x71, 2, 8),
    BIT_72("BIT 6,D", 0x72, 2, 8),
    BIT_73("BIT 6,E", 0x73, 2, 8),
    BIT_74("BIT 6,H", 0x74, 2, 8),
    BIT_75("BIT 6,L", 0x75, 2, 8),
    BIT_76("BIT 6,(HL)", 0x76, 2, 12),
    BIT_77("BIT 6,A", 0x77, 2, 8),
    BIT_78("BIT 7,B", 0x78, 2, 8),
    BIT_79("BIT 7,C", 0x79, 2, 8),
    BIT_7A("BIT 7,D", 0x7A, 2, 8),
    BIT_7B("BIT 7,E", 0x7B, 2, 8),
    BIT_7C("BIT 7,H", 0x7C, 2, 8),
    BIT_7D("BIT 7,L", 0x7D, 2, 8),
    BIT_7E("BIT 7,(HL)", 0x7E, 2, 12),
    BIT_7F("BIT 7,A", 0x7F, 2, 8),

    RES_80("RES 0,B", 0x80, 2, 8),
    RES_81("RES 0,C", 0x81, 2, 8),
    RES_82("RES 0,D", 0x82, 2, 8),
    RES_83("RES 0,E", 0x83, 2, 8),
    RES_84("RES 0,H", 0x84, 2, 8),
    RES_85("RES 0,L", 0x85, 2, 8),
    RES_86("RES 0,(HL)", 0x86, 2, 16),
    RES_87("RES 0,A", 0x87, 2, 8),
    RES_88("RES 1,B", 0x88, 2, 8),
    RES_89("RES 1,C", 0x89, 2, 8),
    RES_8A("RES 1,D", 0x8A, 2, 8),
    RES_8B("RES 1,E", 0x8B, 2, 8),
    RES_8C("RES 1,H", 0x8C, 2, 8),
    RES_8D("RES 1,L", 0x8D, 2, 8),
    RES_8E("RES 1,(HL)", 0x8E, 2, 16),
    RES_8F("RES 1,A", 0x8F, 2, 8),

    RES_90("RES 2,B", 0x90, 2, 8),
    RES_91("RES 2,C", 0x91, 2, 8),
    RES_92("RES 2,D", 0x92, 2, 8),
    RES_93("RES 2,E", 0x93, 2, 8),
    RES_94("RES 2,H", 0x94, 2, 8),
    RES_95("RES 2,L", 0x95, 2, 8),
    RES_96("RES 2,(HL)", 0x96, 2, 16),
    RES_97("RES 2,A", 0x97, 2, 8),
    RES_98("RES 3,B", 0x98, 2, 8),
    RES_99("RES 3,C", 0x99, 2, 8),
    RES_9A("RES 3,D", 0x9A, 2, 8),
    RES_9B("RES 3,E", 0x9B, 2, 8),
    RES_9C("RES 3,H", 0x9C, 2, 8),
    RES_9D("RES 3,L", 0x9D, 2, 8),
    RES_9E("RES 3,(HL)", 0x9E, 2, 16),
    RES_9F("RES 3,A", 0x9F, 2, 8),

    RES_A0("RES 4,B", 0xA0, 2, 8),
    RES_A1("RES 4,C", 0xA1, 2, 8),
    RES_A2("RES 4,D", 0xA2, 2, 8),
    RES_A3("RES 4,E", 0xA3, 2, 8),
    RES_A4("RES 4,H", 0xA4, 2, 8),
    RES_A5("RES 4,L", 0xA5, 2, 8),
    RES_A6("RES 4,(HL)", 0xA6, 2, 16),
    RES_A7("RES 4,A", 0xA7, 2, 8),
    RES_A8("RES 5,B", 0xA8, 2, 8),
    RES_A9("RES 5,C", 0xA9, 2, 8),
    RES_AA("RES 5,D", 0xAA, 2, 8),
    RES_AB("RES 5,E", 0xAB, 2, 8),
    RES_AC("RES 5,H", 0xAC, 2, 8),
    RES_AD("RES 5,L", 0xAD, 2, 8),
    RES_AE("RES 5,(HL)", 0xAE, 2, 16),
    RES_AF("RES 5,A", 0xAF, 2, 8),

    RES_B0("RES 6,B", 0xB0, 2, 8),
    RES_B1("RES 6,C", 0xB1, 2, 8),
    RES_B2("RES 6,D", 0xB2, 2, 8),
    RES_B3("RES 6,E", 0xB3, 2, 8),
    RES_B4("RES 6,H", 0xB4, 2, 8),
    RES_B5("RES 6,L", 0xB5, 2, 8),
    RES_B6("RES 6,(HL)", 0xB6, 2, 16),
    RES_B7("RES 6,A", 0xB7, 2, 8),
    RES_B8("RES 7,B", 0xB8, 2, 8),
    RES_B9("RES 7,C", 0xB9, 2, 8),
    RES_BA("RES 7,D", 0xBA, 2, 8),
    RES_BB("RES 7,E", 0xBB, 2, 8),
    RES_BC("RES 7,H", 0xBC, 2, 8),
    RES_BD("RES 7,L", 0xBD, 2, 8),
    RES_BE("RES 7,(HL)", 0xBE, 2, 16),
    RES_BF("RES 7,A", 0xBF, 2, 8),

    SET_C0("SET 0,B", 0xC0, 2, 8),
    SET_C1("SET 0,C", 0xC1, 2, 8),
    SET_C2("SET 0,D", 0xC2, 2, 8),
    SET_C3("SET 0,E", 0xC3, 2, 8),
    SET_C4("SET 0,H", 0xC4, 2, 8),
    SET_C5("SET 0,L", 0xC5, 2, 8),
    SET_C6("SET 0,(HL)", 0xC6, 2, 16),
    SET_C7("SET 0,A", 0xC7, 2, 8),
    SET_C8("SET 1,B", 0xC8, 2, 8),
    SET_C9("SET 1,C", 0xC9, 2, 8),
    SET_CA("SET 1,D", 0xCA, 2, 8),
    SET_CB("SET 1,E", 0xCB, 2, 8),
    SET_CC("SET 1,H", 0xCC, 2, 8),
    SET_CD("SET 1,L", 0xCD, 2, 8),
    SET_CE("SET 1,(HL)", 0xCE, 2, 16),
    SET_CF("SET 1,A", 0xCF, 2, 8),

    SET_D0("SET 2,B", 0xD0, 2, 8),
    SET_D1("SET 2,C", 0xD1, 2, 8),
    SET_D2("SET 2,D", 0xD2, 2, 8),
    SET_D3("SET 2,E", 0xD3, 2, 8),
    SET_D4("SET 2,H", 0xD4, 2, 8),
    SET_D5("SET 2,L", 0xD5, 2, 8),
    SET_D6("SET 2,(HL)", 0xD6, 2, 16),
    SET_D7("SET 2,A", 0xD7, 2, 8),
    SET_D8("SET 3,B", 0xD8, 2, 8),
    SET_D9("SET 3,C", 0xD9, 2, 8),
    SET_DA("SET 3,D", 0xDA, 2, 8),
    SET_DB("SET 3,E", 0xDB, 2, 8),
    SET_DC("SET 3,H", 0xDC, 2, 8),
    SET_DD("SET 3,L", 0xDD, 2, 8),
    SET_DE("SET 3,(HL)", 0xDE, 2, 16),
    SET_DF("SET 3,A", 0xDF, 2, 8),

    SET_E0("SET 4,B", 0xE0, 2, 8),
    SET_E1("SET 4,C", 0xE1, 2, 8),
    SET_E2("SET 4,D", 0xE2, 2, 8),
    SET_E3("SET 4,E", 0xE3, 2, 8),
    SET_E4("SET 4,H", 0xE4, 2, 8),
    SET_E5("SET 4,L", 0xE5, 2, 8),
    SET_E6("SET 4,(HL)", 0xE6, 2, 16),
    SET_E7("SET 4,A", 0xE7, 2, 8),
    SET_E8("SET 5,B", 0xE8, 2, 8),
    SET_E9("SET 5,C", 0xE9, 2, 8),
    SET_EA("SET 5,D", 0xEA, 2, 8),
    SET_EB("SET 5,E", 0xEB, 2, 8),
    SET_EC("SET 5,H", 0xEC, 2, 8),
    SET_ED("SET 5,L", 0xED, 2, 8),
    SET_EE("SET 5,(HL)", 0xEE, 2, 16),
    SET_EF("SET 5,A", 0xEF, 2, 8),

    SET_F0("SET 6,B", 0xF0, 2, 8),
    SET_F1("SET 6,C", 0xF1, 2, 8),
    SET_F2("SET 6,D", 0xF2, 2, 8),
    SET_F3("SET 6,E", 0xF3, 2, 8),
    SET_F4("SET 6,H", 0xF4, 2, 8),
    SET_F5("SET 6,L", 0xF5, 2, 8),
    SET_F6("SET 6,(HL)", 0xF6, 2, 16),
    SET_F7("SET 6,A", 0xF7, 2, 8),
    SET_F8("SET 7,B", 0xF8, 2, 8),
    SET_F9("SET 7,C", 0xF9, 2, 8),
    SET_FA("SET 7,D", 0xFA, 2, 8),
    SET_FB("SET 7,E", 0xFB, 2, 8),
    SET_FC("SET 7,H", 0xFC, 2, 8),
    SET_FD("SET 7,L", 0xFD, 2, 8),
    SET_FE("SET 7,(HL)", 0xFE, 2, 16),
    SET_FF("SET 7,A", 0xFF, 2, 8);

    fun argsSize(): Int {
        if (ordinal > 0xFF) return this.bytes - 2
        return this.bytes - 1
    }

    override fun toString(): String {
        return this.mnemonic
    }

    companion object {

        operator fun get(i: Int, cb: Boolean = false): OpCode {
            return if (cb) values()[i + 0x100]
            else values()[i]
        }

    }

}