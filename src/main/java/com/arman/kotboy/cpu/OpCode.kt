package com.arman.kotboy.cpu

import com.arman.kotboy.cpu.Operand.Type.*

enum class OpCode {

    // mnemonic - operands - opcode - cycles - flags

    // load operations 8 / 16 bit
    LD_01(0x01, D16),
    LD_02(0x02),
    LD_06(0x06, D8),
    LD_08(0x08, A16),
    LD_0A(0x0A),
    LD_0E(0x0E, D8),
    LD_11(0x11, D16),
    LD_12(0x12),
    LD_16(0x16, D8),
    LD_1A(0x1A),
    LD_1E(0x1E, D8),
    LD_21(0x21, D16),
    LD_22(0x22),
    LD_26(0x26, D8),
    LD_2A(0x2A),
    LD_2E(0x2E, D8),
    LD_31(0x31, D16),
    LD_32(0x32),
    LD_36(0x36, D8),
    LD_3A(0x3A),
    LD_3E(0x3E, D8),
    LD_40(0x40),
    LD_41(0x41),
    LD_42(0x42),
    LD_43(0x43),
    LD_44(0x44),
    LD_45(0x45),
    LD_46(0x46),
    LD_47(0x47),
    LD_48(0x48),
    LD_49(0x49),
    LD_4A(0x4A),
    LD_4B(0x4B),
    LD_4C(0x4C),
    LD_4D(0x4D),
    LD_4E(0x4E),
    LD_4F(0x4F),
    LD_50(0x50),
    LD_51(0x51),
    LD_52(0x52),
    LD_53(0x53),
    LD_54(0x54),
    LD_55(0x55),
    LD_56(0x56),
    LD_57(0x57),
    LD_58(0x58),
    LD_59(0x59),
    LD_5A(0x5A),
    LD_5B(0x5B),
    LD_5C(0x5C),
    LD_5D(0x5D),
    LD_5E(0x5E),
    LD_5F(0x5F),
    LD_60(0x60),
    LD_61(0x61),
    LD_62(0x62),
    LD_63(0x63),
    LD_64(0x64),
    LD_65(0x65),
    LD_66(0x66),
    LD_67(0x67),
    LD_68(0x68),
    LD_69(0x69),
    LD_6A(0x6A),
    LD_6B(0x6B),
    LD_6C(0x6C),
    LD_6D(0x6D),
    LD_6E(0x6E),
    LD_6F(0x6F),
    LD_70(0x70),
    LD_71(0x71),
    LD_72(0x72),
    LD_73(0x73),
    LD_74(0x74),
    LD_75(0x75),
    LD_77(0x77),
    LD_78(0x78),
    LD_79(0x79),
    LD_7A(0x7A),
    LD_7B(0x7B),
    LD_7C(0x7C),
    LD_7D(0x7D),
    LD_7E(0x7E),
    LD_7F(0x7F),
    LD_E0(0xE0, A8),
    LD_E2(0xE2),
    LD_EA(0xEA, A16),
    LD_F0(0xF0, A8),
    LD_F2(0xF2),
    LD_F8(0xF8, D8),
    LD_F9(0xF9),
    LD_FA(0xFA, A16),

    // stack operations
    POP_C1(0xC1),
    POP_D1(0xD1),
    POP_E1(0xE1),
    POP_F1(0xF1),

    PUSH_C5(0xC5),
    PUSH_D5(0xD5),
    PUSH_E5(0xE5),
    PUSH_F5(0xF5),

    // alu operations 8 / 16 bit
    ADD_09(0x09),
    ADD_19(0x19),
    ADD_29(0x29),
    ADD_39(0x39),
    ADD_80(0x80),
    ADD_81(0x81),
    ADD_82(0x82),
    ADD_83(0x83),
    ADD_84(0x84),
    ADD_85(0x85),
    ADD_86(0x86),
    ADD_87(0x87),
    ADD_C6(0xC6, D8),
    ADD_E8(0xE8, R8),

    ADC_88(0x88),
    ADC_89(0x89),
    ADC_8A(0x8A),
    ADC_8B(0x8B),
    ADC_8C(0x8C),
    ADC_8D(0x8D),
    ADC_8E(0x8E),
    ADC_8F(0x8F),
    ADC_CE(0xCE, D8),

    SUB_90(0x90),
    SUB_91(0x91),
    SUB_92(0x92),
    SUB_93(0x93),
    SUB_94(0x94),
    SUB_95(0x95),
    SUB_96(0x96),
    SUB_97(0x97),
    SUB_D6(0xD6, D8),

    SBC_98(0x98),
    SBC_99(0x99),
    SBC_9A(0x9A),
    SBC_9B(0x9B),
    SBC_9C(0x9C),
    SBC_9D(0x9D),
    SBC_9E(0x9E),
    SBC_9F(0x9F),
    SBC_DE(0xDE, D8),

    AND_A0(0xA0),
    AND_A1(0xA1),
    AND_A2(0xA2),
    AND_A3(0xA3),
    AND_A4(0xA4),
    AND_A5(0xA5),
    AND_A6(0xA6),
    AND_A7(0xA7),
    AND_E6(0xE6, D8),

    OR_B0(0xB0),
    OR_B1(0xB1),
    OR_B2(0xB2),
    OR_B3(0xB3),
    OR_B4(0xB4),
    OR_B5(0xB5),
    OR_B6(0xB6),
    OR_B7(0xB7),
    OR_F6(0xF6, D8),

    XOR_A8(0xA8),
    XOR_A9(0xA9),
    XOR_AA(0xAA),
    XOR_AB(0xAB),
    XOR_AC(0xAC),
    XOR_AD(0xAD),
    XOR_AE(0xAE),
    XOR_AF(0xAF),
    XOR_EE(0xEE, D8),

    CP_B8(0xB8),
    CP_B9(0xB9),
    CP_BA(0xBA),
    CP_BB(0xBB),
    CP_BC(0xBC),
    CP_BD(0xBD),
    CP_BE(0xBE),
    CP_BF(0xBF),
    CP_FE(0xFE, D8),

    INC_03(0x03),
    INC_04(0x04),
    INC_0C(0x0C),
    INC_13(0x13),
    INC_14(0x14),
    INC_1C(0x1C),
    INC_23(0x23),
    INC_24(0x24),
    INC_2C(0x2C),
    INC_33(0x33),
    INC_34(0x34),
    INC_3C(0x3C),

    DEC_05(0x05),
    DEC_0B(0x0B),
    DEC_0D(0x0D),
    DEC_15(0x15),
    DEC_1B(0x1B),
    DEC_1D(0x1D),
    DEC_25(0x25),
    DEC_2B(0x2B),
    DEC_2D(0x2D),
    DEC_35(0x35),
    DEC_3B(0x3B),
    DEC_3D(0x3D),

    // miscellaneous operations
    SWAP_CB_30(0x30),
    SWAP_CB_31(0x31),
    SWAP_CB_32(0x32),
    SWAP_CB_33(0x33),
    SWAP_CB_34(0x34),
    SWAP_CB_35(0x35),
    SWAP_CB_36(0x36),
    SWAP_CB_37(0x37),

    DAA_27(0x27),

    CPL_2F(0x2F),

    CCF_3F(0x3F),

    SCF_37(0x37),

    NOP_00(0x00),

    HALT_76(0x76),

    STOP_10(0x10),

    DI_F3(0xF3),

    EI_FB(0xFB),

    // rotate & shift operations
    RLCA_07(0x07),

    RLA_17(0x17),

    RRCA_0F(0x0F),

    RRA_1F(0x1F),

    RLC_CB_00(0x00),
    RLC_CB_01(0x01),
    RLC_CB_02(0x02),
    RLC_CB_03(0x03),
    RLC_CB_04(0x04),
    RLC_CB_05(0x05),
    RLC_CB_06(0x06),
    RLC_CB_07(0x07),

    RL_CB_10(0x10),
    RL_CB_11(0x11),
    RL_CB_12(0x12),
    RL_CB_13(0x13),
    RL_CB_14(0x14),
    RL_CB_15(0x15),
    RL_CB_16(0x16),
    RL_CB_17(0x17),

    RRC_CB_08(0x08),
    RRC_CB_09(0x09),
    RRC_CB_0A(0x0A),
    RRC_CB_0B(0x0B),
    RRC_CB_0C(0x0C),
    RRC_CB_0D(0x0D),
    RRC_CB_0E(0x0E),
    RRC_CB_0F(0x0F),

    RR_CB_18(0x18),
    RR_CB_19(0x19),
    RR_CB_1A(0x1A),
    RR_CB_1B(0x1B),
    RR_CB_1C(0x1C),
    RR_CB_1D(0x1D),
    RR_CB_1E(0x1E),
    RR_CB_1F(0x1F),

    SLA_CB_20(0x20),
    SLA_CB_21(0x21),
    SLA_CB_22(0x22),
    SLA_CB_23(0x23),
    SLA_CB_24(0x24),
    SLA_CB_25(0x25),
    SLA_CB_26(0x26),
    SLA_CB_27(0x27),

    SRA_CB_28(0x28),
    SRA_CB_29(0x29),
    SRA_CB_2A(0x2A),
    SRA_CB_2B(0x2B),
    SRA_CB_2C(0x2C),
    SRA_CB_2D(0x2D),
    SRA_CB_2E(0x2E),
    SRA_CB_2F(0x2F),

    SRL_CB_38(0x38),
    SRL_CB_39(0x39),
    SRL_CB_3A(0x3A),
    SRL_CB_3B(0x3B),
    SRL_CB_3C(0x3C),
    SRL_CB_3D(0x3D),
    SRL_CB_3E(0x3E),
    SRL_CB_3F(0x3F),

    // bit opcodes
    BIT_CB_40(0x40),
    BIT_CB_41(0x41),
    BIT_CB_42(0x42),
    BIT_CB_43(0x43),
    BIT_CB_44(0x44),
    BIT_CB_45(0x45),
    BIT_CB_46(0x46),
    BIT_CB_47(0x47),
    BIT_CB_48(0x48),
    BIT_CB_49(0x49),
    BIT_CB_4A(0x4A),
    BIT_CB_4B(0x4B),
    BIT_CB_4C(0x4C),
    BIT_CB_4D(0x4D),
    BIT_CB_4E(0x4E),
    BIT_CB_4F(0x4F),
    BIT_CB_50(0x50),
    BIT_CB_51(0x51),
    BIT_CB_52(0x52),
    BIT_CB_53(0x53),
    BIT_CB_54(0x54),
    BIT_CB_55(0x55),
    BIT_CB_56(0x56),
    BIT_CB_57(0x57),
    BIT_CB_58(0x58),
    BIT_CB_59(0x59),
    BIT_CB_5A(0x5A),
    BIT_CB_5B(0x5B),
    BIT_CB_5C(0x5C),
    BIT_CB_5D(0x5D),
    BIT_CB_5E(0x5E),
    BIT_CB_5F(0x5F),
    BIT_CB_60(0x60),
    BIT_CB_61(0x61),
    BIT_CB_62(0x62),
    BIT_CB_63(0x63),
    BIT_CB_64(0x64),
    BIT_CB_65(0x65),
    BIT_CB_66(0x66),
    BIT_CB_67(0x67),
    BIT_CB_68(0x68),
    BIT_CB_69(0x69),
    BIT_CB_6A(0x6A),
    BIT_CB_6B(0x6B),
    BIT_CB_6C(0x6C),
    BIT_CB_6D(0x6D),
    BIT_CB_6E(0x6E),
    BIT_CB_6F(0x6F),
    BIT_CB_70(0x70),
    BIT_CB_71(0x71),
    BIT_CB_72(0x72),
    BIT_CB_73(0x73),
    BIT_CB_74(0x74),
    BIT_CB_75(0x75),
    BIT_CB_76(0x76),
    BIT_CB_77(0x77),
    BIT_CB_78(0x78),
    BIT_CB_79(0x79),
    BIT_CB_7A(0x7A),
    BIT_CB_7B(0x7B),
    BIT_CB_7C(0x7C),
    BIT_CB_7D(0x7D),
    BIT_CB_7E(0x7E),
    BIT_CB_7F(0x7F),

    SET_CB_C0(0xC0),
    SET_CB_C1(0xC1),
    SET_CB_C2(0xC2),
    SET_CB_C3(0xC3),
    SET_CB_C4(0xC4),
    SET_CB_C5(0xC5),
    SET_CB_C6(0xC6),
    SET_CB_C7(0xC7),
    SET_CB_C8(0xC8),
    SET_CB_C9(0xC9),
    SET_CB_CA(0xCA),
    SET_CB_CB(0xCB),
    SET_CB_CC(0xCC),
    SET_CB_CD(0xCD),
    SET_CB_CE(0xCE),
    SET_CB_CF(0xCF),
    SET_CB_D0(0xD0),
    SET_CB_D1(0xD1),
    SET_CB_D2(0xD2),
    SET_CB_D3(0xD3),
    SET_CB_D4(0xD4),
    SET_CB_D5(0xD5),
    SET_CB_D6(0xD6),
    SET_CB_D7(0xD7),
    SET_CB_D8(0xD8),
    SET_CB_D9(0xD9),
    SET_CB_DA(0xDA),
    SET_CB_DB(0xDB),
    SET_CB_DC(0xDC),
    SET_CB_DD(0xDD),
    SET_CB_DE(0xDE),
    SET_CB_DF(0xDF),
    SET_CB_E0(0xE0),
    SET_CB_E1(0xE1),
    SET_CB_E2(0xE2),
    SET_CB_E3(0xE3),
    SET_CB_E4(0xE4),
    SET_CB_E5(0xE5),
    SET_CB_E6(0xE6),
    SET_CB_E7(0xE7),
    SET_CB_E8(0xE8),
    SET_CB_E9(0xE9),
    SET_CB_EA(0xEA),
    SET_CB_EB(0xEB),
    SET_CB_EC(0xEC),
    SET_CB_ED(0xED),
    SET_CB_EE(0xEE),
    SET_CB_EF(0xEF),
    SET_CB_F0(0xF0),
    SET_CB_F1(0xF1),
    SET_CB_F2(0xF2),
    SET_CB_F3(0xF3),
    SET_CB_F4(0xF4),
    SET_CB_F5(0xF5),
    SET_CB_F6(0xF6),
    SET_CB_F7(0xF7),
    SET_CB_F8(0xF8),
    SET_CB_F9(0xF9),
    SET_CB_FA(0xFA),
    SET_CB_FB(0xFB),
    SET_CB_FC(0xFC),
    SET_CB_FD(0xFD),
    SET_CB_FE(0xFE),
    SET_CB_FF(0xFF),

    RES_CB_80(0x80),
    RES_CB_81(0x81),
    RES_CB_82(0x82),
    RES_CB_83(0x83),
    RES_CB_84(0x84),
    RES_CB_85(0x85),
    RES_CB_86(0x86),
    RES_CB_87(0x87),
    RES_CB_88(0x88),
    RES_CB_89(0x89),
    RES_CB_8A(0x8A),
    RES_CB_8B(0x8B),
    RES_CB_8C(0x8C),
    RES_CB_8D(0x8D),
    RES_CB_8E(0x8E),
    RES_CB_8F(0x8F),
    RES_CB_90(0x90),
    RES_CB_91(0x91),
    RES_CB_92(0x92),
    RES_CB_93(0x93),
    RES_CB_94(0x94),
    RES_CB_95(0x95),
    RES_CB_96(0x96),
    RES_CB_97(0x97),
    RES_CB_98(0x98),
    RES_CB_99(0x99),
    RES_CB_9A(0x9A),
    RES_CB_9B(0x9B),
    RES_CB_9C(0x9C),
    RES_CB_9D(0x9D),
    RES_CB_9E(0x9E),
    RES_CB_9F(0x9F),
    RES_CB_A0(0xA0),
    RES_CB_A1(0xA1),
    RES_CB_A2(0xA2),
    RES_CB_A3(0xA3),
    RES_CB_A4(0xA4),
    RES_CB_A5(0xA5),
    RES_CB_A6(0xA6),
    RES_CB_A7(0xA7),
    RES_CB_A8(0xA8),
    RES_CB_A9(0xA9),
    RES_CB_AA(0xAA),
    RES_CB_AB(0xAB),
    RES_CB_AC(0xAC),
    RES_CB_AD(0xAD),
    RES_CB_AE(0xAE),
    RES_CB_AF(0xAF),
    RES_CB_B0(0xB0),
    RES_CB_B1(0xB1),
    RES_CB_B2(0xB2),
    RES_CB_B3(0xB3),
    RES_CB_B4(0xB4),
    RES_CB_B5(0xB5),
    RES_CB_B6(0xB6),
    RES_CB_B7(0xB7),
    RES_CB_B8(0xB8),
    RES_CB_B9(0xB9),
    RES_CB_BA(0xBA),
    RES_CB_BB(0xBB),
    RES_CB_BC(0xBC),
    RES_CB_BD(0xBD),
    RES_CB_BE(0xBE),
    RES_CB_BF(0xBF),

    // jumps
    JP_C2(0xC2, A16),
    JP_C3(0xC3, A16),
    JP_CA(0xCA, A16),
    JP_D2(0xD2, A16),
    JP_DA(0xDA, A16),
    JP_E9(0xE9),

    JR_18(0x18, R8),
    JR_20(0x20, R8),
    JR_28(0x28, R8),
    JR_30(0x30, R8),
    JR_38(0x38, R8),

    // calls
    CALL_C4(0xC4, A16),
    CALL_CC(0xCC, A16),
    CALL_CD(0xCD, A16),
    CALL_D7(0xD7, A16),
    CALL_DC(0xDC, A16),

    // restarts
    RST_C7(0xC7),
    RST_D7(0xD7),
    RST_E7(0xE7),
    RST_F7(0xF7),

    // returns
    RET_C0(0xC0),
    RET_C8(0xC8),
    RET_C9(0xC9),
    RET_D0(0xD0),
    RET_D8(0xD8),

    RETI_D9(0xD9),

    PREFIX_CB(0xCB);

    private val opcode: Int

    private val source: Operand.Type
    private val target: Operand.Type

    constructor(opcode: Int, target: Operand.Type = UNDEFINED, source: Operand.Type = UNDEFINED) {
        this.opcode = opcode
        this.target = target
        this.source = source
    }

}