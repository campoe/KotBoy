package com.arman.kotboy.cpu

import com.arman.kotboy.cpu.Operand.Type.*

enum class OpCode(
    val mnemonic: String,
    val opcode: Int,
    val bytes: Int,
    val cycles: Int,
    private vararg val args: Operand.Type,
    val cyclesNotTaken: Int = cycles
) : OpCodes {

    NOP_00("NOP", 0x00, 1, 4),
    LD_01("LD BC,d16", 0x01, 3, 12, d16),
    LD_02("LD (BC),A", 0x02, 1, 8),
    INC_03("INC BC", 0x03, 1, 8),
    INC_04("INC B", 0x04, 1, 4),
    DEC_05("DEC B", 0x05, 1, 4),
    LD_06("LD B,d8", 0x06, 2, 8, d8),
    RLCA_07("RLCA", 0x07, 1, 4),
    LD_08("LD (a16),SP", 0x08, 3, 20, a16),
    ADD_09("ADD HL,BC", 0x09, 1, 8),
    LD_0A("LD A,(BC)", 0x0A, 1, 8),
    DEC_0B("DEC BC", 0x0B, 1, 8),
    INC_0C("INC C", 0x0C, 1, 4),
    DEC_0D("DEC C", 0x0D, 1, 4),
    LD_0E("LD C,d8", 0x0E, 2, 8, d8),
    RRCA_0F("RRCA", 0x0F, 1, 4),

    STOP_10("STOP 0", 0x10, 2, 4, UNDEFINED),
    LD_11("LD DE,d16", 0x11, 3, 12, d16),
    LD_12("LD (DE),A", 0x12, 1, 8),
    INC_13("INC DE", 0x13, 1, 8),
    INC_14("INC D", 0x14, 1, 4),
    DEC_15("DEC D", 0x15, 1, 4),
    LD_16("LD D,d8", 0x16, 2, 8, d8),
    RLA_17("RLA", 0x17, 1, 4),
    JR_18("JR r8", 0x18, 2, 12, r8),
    ADD_19("ADD HL,DE", 0x19, 1, 8),
    LD_1A("LD A,(DE)", 0x1A, 1, 8),
    DEC_1B("DEC DE", 0x1B, 1, 8),
    INC_1C("INC E", 0x1C, 1, 4),
    DEC_1D("DEC E", 0x1D, 1, 4),
    LD_1E("LD E,d8", 0x1E, 2, 8, d8),
    RRA_1F("RRA", 0x1F, 1, 4),

    JR_20("JR NZ,r8", 0x20, 2, 12, r8, cyclesNotTaken = 8),
    LD_21("LD HL,d16", 0x21, 3, 12, d16),
    LD_22("LD (HL+),A", 0x22, 1, 8),
    INC_23("INC HL", 0x23, 1, 8),
    INC_24("INC H", 0x24, 1, 4),
    DEC_25("DEC H", 0x25, 1, 4),
    LD_26("LD H,d8", 0x26, 2, 8, d8),
    DAA_27("DAA", 0x27, 1, 4),
    JR_28("JR Z,r8", 0x28, 2, 12, r8, cyclesNotTaken = 8),
    ADD_29("ADD HL,HL", 0x29, 1, 8),
    LD_2A("LD A,(HL+)", 0x2A, 1, 8),
    DEC_2B("DEC HL", 0x2B, 1, 8),
    INC_2C("INC L", 0x2C, 1, 4),
    DEC_2D("DEC L", 0x2D, 1, 4),
    LD_2E("LD L,d8", 0x2E, 2, 8, d8),
    CPL_2F("CPL", 0x2F, 1, 4),

    JR_30("JR NC,r8", 0x30, 2, 12, r8, cyclesNotTaken = 8),
    LD_31("LD SP,d16", 0x31, 3, 12, d16),
    LD_32("LD (HL-),A", 0x32, 1, 8),
    INC_33("INC SP", 0x33, 1, 8),
    INC_34("INC (HL)", 0x34, 1, 8),
    DEC_35("DEC (HL)", 0x35, 1, 8),
    LD_36("LD (HL),d8", 0x36, 2, 8, d8),
    SCF_37("SCF", 0x37, 1, 4),
    JR_38("JR C,r8", 0x38, 2, 12, r8, cyclesNotTaken = 8),
    ADD_39("ADD HL,SP", 0x39, 1, 8),
    LD_3A("LD A,(HL-)", 0x3A, 1, 8),
    DEC_3B("DEC SP", 0x3B, 1, 8),
    INC_3C("INC A", 0x3C, 1, 4),
    DEC_3D("DEC A", 0x3D, 1, 4),
    LD_3E("LD A,d8", 0x3E, 2, 8, d8),
    CCF_3F("CCF", 0x3F, 1, 4),

    LD_40("LD B,B", 0x40, 1, 4),
    LD_41("LD B,C", 0x41, 1, 4),
    LD_42("LD B,D", 0x42, 1, 4),
    LD_43("LD B,E", 0x43, 1, 4),
    LD_44("LD B,H", 0x44, 1, 4),
    LD_45("LD B,L", 0x45, 1, 4),
    LD_46("LD B,(HL)", 0x46, 1, 8),
    LD_47("LD B,A", 0x47, 1, 4),
    LD_48("LD C,B", 0x48, 1, 4),
    LD_49("LD C,C", 0x49, 1, 4),
    LD_4A("LD C,D", 0x4A, 1, 4),
    LD_4B("LD C,E", 0x4B, 1, 4),
    LD_4C("LD C,H", 0x4C, 1, 4),
    LD_4D("LD C,L", 0x4D, 1, 4),
    LD_4E("LD C,(HL)", 0x4E, 1, 8),
    LD_4F("LD C,A", 0x4F, 1, 4),

    LD_50("LD D,B", 0x50, 1, 4),
    LD_51("LD D,C", 0x51, 1, 4),
    LD_52("LD D,D", 0x52, 1, 4),
    LD_53("LD D,E", 0x53, 1, 4),
    LD_54("LD D,H", 0x54, 1, 4),
    LD_55("LD D,L", 0x55, 1, 4),
    LD_56("LD D,(HL)", 0x56, 1, 8),
    LD_57("LD D,A", 0x57, 1, 4),
    LD_58("LD E,B", 0x58, 1, 4),
    LD_59("LD E,C", 0x59, 1, 4),
    LD_5A("LD E,D", 0x5A, 1, 4),
    LD_5B("LD E,E", 0x5B, 1, 4),
    LD_5C("LD E,H", 0x5C, 1, 4),
    LD_5D("LD E,L", 0x5D, 1, 4),
    LD_5E("LD E,(HL)", 0x5E, 1, 8),
    LD_5F("LD E,A", 0x5F, 1, 4),

    LD_60("LD H,B", 0x60, 1, 4),
    LD_61("LD H,C", 0x61, 1, 4),
    LD_62("LD H,D", 0x62, 1, 4),
    LD_63("LD H,E", 0x63, 1, 4),
    LD_64("LD H,H", 0x64, 1, 4),
    LD_65("LD H,L", 0x65, 1, 4),
    LD_66("LD H,(HL)", 0x66, 1, 8),
    LD_67("LD H,A", 0x67, 1, 4),
    LD_68("LD L,B", 0x68, 1, 4),
    LD_69("LD L,C", 0x69, 1, 4),
    LD_6A("LD L,D", 0x6A, 1, 4),
    LD_6B("LD L,E", 0x6B, 1, 4),
    LD_6C("LD L,H", 0x6C, 1, 4),
    LD_6D("LD L,L", 0x6D, 1, 4),
    LD_6E("LD L,(HL)", 0x6E, 1, 8),
    LD_6F("LD L,A", 0x6F, 1, 4),

    LD_70("LD (HL),B", 0x70, 1, 8),
    LD_71("LD (HL),C", 0x71, 1, 8),
    LD_72("LD (HL),D", 0x72, 1, 8),
    LD_73("LD (HL),E", 0x73, 1, 8),
    LD_74("LD (HL),H", 0x74, 1, 8),
    LD_75("LD (HL),L", 0x75, 1, 8),
    HALT_76("HALT", 0x76, 1, 4),
    LD_77("LD (HL),A", 0x77, 1, 8),
    LD_78("LD A,B", 0x78, 1, 4),
    LD_79("LD A,C", 0x79, 1, 4),
    LD_7A("LD A,D", 0x7A, 1, 4),
    LD_7B("LD A,E", 0x7B, 1, 4),
    LD_7C("LD A,H", 0x7C, 1, 4),
    LD_7D("LD A,L", 0x7D, 1, 4),
    LD_7E("LD A,(HL)", 0x7E, 1, 8),
    LD_7F("LD A,A", 0x7F, 1, 4),

    ADD_80("ADD A,B", 0x80, 1, 4),
    ADD_81("ADD A,C", 0x81, 1, 4),
    ADD_82("ADD A,D", 0x82, 1, 4),
    ADD_83("ADD A,E", 0x83, 1, 4),
    ADD_84("ADD A,H", 0x84, 1, 4),
    ADD_85("ADD A,L", 0x85, 1, 4),
    ADD_86("ADD A,(HL)", 0x86, 1, 8),
    ADD_87("ADD A,A", 0x87, 1, 4),
    ADC_88("ADC A,B", 0x88, 1, 4),
    ADC_89("ADC A,C", 0x89, 1, 4),
    ADC_8A("ADC A,D", 0x8A, 1, 4),
    ADC_8B("ADC A,E", 0x8B, 1, 4),
    ADC_8C("ADC A,H", 0x8C, 1, 4),
    ADC_8D("ADC A,L", 0x8D, 1, 4),
    ADC_8E("ADC A,(HL)", 0x8E, 1, 8),
    ADC_8F("ADC A,A", 0x8F, 1, 4),

    SUB_90("SUB B", 0x90, 1, 4),
    SUB_91("SUB C", 0x91, 1, 4),
    SUB_92("SUB D", 0x92, 1, 4),
    SUB_93("SUB E", 0x93, 1, 4),
    SUB_94("SUB H", 0x94, 1, 4),
    SUB_95("SUB L", 0x95, 1, 4),
    SUB_96("SUB (HL)", 0x96, 1, 8),
    SUB_97("SUB A", 0x97, 1, 4),
    SBC_98("SBC A,B", 0x98, 1, 4),
    SBC_99("SBC A,C", 0x99, 1, 4),
    SBC_9A("SBC A,D", 0x9A, 1, 4),
    SBC_9B("SBC A,E", 0x9B, 1, 4),
    SBC_9C("SBC A,H", 0x9C, 1, 4),
    SBC_9D("SBC A,L", 0x9D, 1, 4),
    SBC_9E("SBC A,(HL)", 0x9E, 1, 8),
    SBC_9F("SBC A,A", 0x9F, 1, 4),

    AND_A0("AND B", 0xA0, 1, 4),
    AND_A1("AND C", 0xA1, 1, 4),
    AND_A2("AND D", 0xA2, 1, 4),
    AND_A3("AND E", 0xA3, 1, 4),
    AND_A4("AND H", 0xA4, 1, 4),
    AND_A5("AND L", 0xA5, 1, 4),
    AND_A6("AND (HL)", 0xA6, 1, 8),
    AND_A7("AND A", 0xA7, 1, 4),
    XOR_A8("XOR B", 0xA8, 1, 4),
    XOR_A9("XOR C", 0xA9, 1, 4),
    XOR_AA("XOR D", 0xAA, 1, 4),
    XOR_AB("XOR E", 0xAB, 1, 4),
    XOR_AC("XOR H", 0xAC, 1, 4),
    XOR_AD("XOR L", 0xAD, 1, 4),
    XOR_AE("XOR (HL)", 0xAE, 1, 8),
    XOR_AF("XOR A", 0xAF, 1, 4),

    OR_B0("OR B", 0xB0, 1, 4),
    OR_B1("OR C", 0xB1, 1, 4),
    OR_B2("OR D", 0xB2, 1, 4),
    OR_B3("OR E", 0xB3, 1, 4),
    OR_B4("OR H", 0xB4, 1, 4),
    OR_B5("OR L", 0xB5, 1, 4),
    OR_B6("OR (HL)", 0xB6, 1, 8),
    OR_B7("OR A", 0xB7, 1, 4),
    CP_B8("CP B", 0xB8, 1, 4),
    CP_B9("CP C", 0xB9, 1, 4),
    CP_BA("CP D", 0xBA, 1, 4),
    CP_BB("CP E", 0xBB, 1, 4),
    CP_BC("CP H", 0xBC, 1, 4),
    CP_BD("CP L", 0xBD, 1, 4),
    CP_BE("CP (HL)", 0xBE, 1, 8),
    CP_BF("CP A", 0xBF, 1, 4),

    RET_C0("RET NZ", 0xC0, 1, 20, cyclesNotTaken = 8),
    POP_C1("POP BC", 0xC1, 1, 12),
    JP_C2("JP NZ,a16", 0xC2, 3, 16, a16, cyclesNotTaken = 12),
    JP_C3("JP a16", 0xC3, 3, 16, a16),
    CALL_C4("CALL NZ,a16", 0xC4, 3, 24, a16, cyclesNotTaken = 12),
    PUSH_C5("PUSH BC", 0xC5, 1, 16),
    ADD_C6("ADD A,d8", 0xC6, 2, 8, d8),
    RST_C7("RST 00H", 0xC7, 1, 16),
    RET_C8("RET Z", 0xC8, 1, 20, cyclesNotTaken = 8),
    RET_C9("RET", 0xC9, 1, 16),
    JP_CA("JP Z,a16", 0xCA, 3, 16, a16, cyclesNotTaken = 12),
    PREFIX_CB("PREFIX CB", 0xCB, 1, 4),
    CALL_CC("CALL Z,a16", 0xCC, 3, 24, a16, cyclesNotTaken = 12),
    CALL_CD("CALL a16", 0xCD, 3, 24, a16),
    ADC_CE("ADC A,d8", 0xCE, 2, 8, d8),
    RST_CF("RST 08H", 0xCF, 1, 16),

    RET_D0("RET NC", 0xD0, 1, 20, cyclesNotTaken = 8),
    POP_D1("POP DE", 0xD1, 1, 12),
    JP_D2("JP NC,a16", 0xD2, 3, 16, a16, cyclesNotTaken = 12),
    __D3("", 0xD3, 0, 0),
    CALL_D4("CALL NC,a16", 0xD4, 3, 24, a16, cyclesNotTaken = 12),
    PUSH_D5("PUSH DE", 0xD5, 1, 16),
    SUB_D6("SUB d8", 0xD6, 2, 8, d8),
    RST_D7("RST 10H", 0xD7, 1, 16),
    RET_D8("RET C", 0xD8, 1, 20, cyclesNotTaken = 8),
    RETI_D9("RETI", 0xD9, 1, 16),
    JP_DA("JP C,a16", 0xDA, 3, 16, a16, cyclesNotTaken = 12),
    __DB("", 0xDB, 0, 0),
    CALL_DC("CALL C,a16", 0xDC, 3, 24, a16, cyclesNotTaken = 12),
    __DD("", 0xDD, 0, 0),
    SBC_DE("SBC A,d8", 0xDE, 2, 8),
    RST_DF("RST 18H", 0xDF, 1, 16),

    LDH_E0("LDH (a8),A", 0xE0, 2, 8, a8),
    POP_E1("POP HL", 0xE1, 1, 12),
    LD_E2("LD (C),A", 0xE2, 1, 8),
    __E3("", 0xE3, 0, 0),
    __E4("", 0xE4, 0, 0),
    PUSH_E5("PUSH HL", 0xE5, 1, 16),
    AND_E6("AND d8", 0xE6, 2, 8),
    RST_E7("RST 20H", 0xE7, 1, 16),
    ADD_E8("ADD SP,r8", 0xE8, 2, 16, r8),
    JP_E9("JP (HL)", 0xE9, 1, 4),
    LD_EA("LD (a16),A", 0xEA, 3, 8, a16),
    __EB("", 0xEB, 0, 0),
    __EC("", 0xEC, 0, 0),
    __ED("", 0xED, 0, 0),
    XOR_EE("XOR d8", 0xEE, 2, 8),
    RST_EF("RST 28H", 0xEF, 1, 16),

    LDH_F0("LDH A,(a8)", 0xF0, 2, 8, a8),
    POP_F1("POP AF", 0xF1, 1, 12),
    LD_F2("LD A,(C)", 0xF2, 1, 8),
    DI_F3("DI", 0xF3, 1, 4),
    __F4("", 0xF4, 0, 0),
    PUSH_F5("PUSH AF", 0xF5, 1, 16),
    OR_F6("OR d8", 0xF6, 2, 8),
    RST_F7("RST 30H", 0xF7, 1, 16),
    LD_F8("LD HL,SP+r8", 0xF8, 2, 12, r8),
    LD_F9("LD SP,HL", 0xF9, 1, 8),
    LD_FA("LD A,(a16)", 0xFA, 3, 8, a16),
    EI_FB("EI", 0xFB, 1, 4),
    __FC("", 0xFC, 0, 0),
    __FD("", 0xFD, 0, 0),
    CP_FE("CP d8", 0xFE, 2, 8, d8),
    RST_FF("RST 38H", 0xFF, 1, 16);

    override fun argsSize(): Int {
        return this.bytes - 1
    }

    override fun cycles(): Int {
        return this.cycles
    }

    override fun args(): Array<out Operand.Type> {
        return this.args
    }

    override fun toString(): String {
        return this.mnemonic
    }

    companion object {

        operator fun get(i: Int): OpCode {
            return values()[i]
        }

    }

}