package com.arman.kotboy.cpu

enum class ExtOpCode(
    val mnemonic: String,
    val opcode: Int,
    val bytes: Int,
    val cycles: Int,
    private vararg val args: Operand.Type,
    val cyclesNotTaken: Int = cycles
) : OpCodes {

    RLC_00("RLC B", 0x00, 2, 8),
    RLC_01("RLC C", 0x01, 2, 8),
    RLC_02("RLC D", 0x02, 2, 8),
    RLC_03("RLC E", 0x03, 2, 8),
    RLC_04("RLC H", 0x04, 2, 8),
    RLC_05("RLC L", 0x05, 2, 8),
    RLC_06("RLC (HL)", 0x06, 2, 8),
    RLC_07("RLC A", 0x07, 2, 8),
    RRC_08("RRC B", 0x08, 2, 8),
    RRC_09("RRC C", 0x09, 2, 8),
    RRC_0A("RRC D", 0x0A, 2, 8),
    RRC_0B("RRC E", 0x0B, 2, 8),
    RRC_0C("RRC H", 0x0C, 2, 8),
    RRC_0D("RRC L", 0x0D, 2, 8),
    RRC_0E("RRC (HL)", 0x0E, 2, 8),
    RRC_0F("RRC A", 0x0F, 2, 8),

    RL_10("RL B", 0x10, 2, 8),
    RL_11("RL C", 0x11, 2, 8),
    RL_12("RL D", 0x12, 2, 8),
    RL_13("RL E", 0x13, 2, 8),
    RL_14("RL H", 0x14, 2, 8),
    RL_15("RL L", 0x15, 2, 8),
    RL_16("RL (HL)", 0x16, 2, 8),
    RL_17("RL A", 0x17, 2, 8),
    RR_18("RR B", 0x18, 2, 8),
    RR_19("RR C", 0x19, 2, 8),
    RR_1A("RR D", 0x1A, 2, 8),
    RR_1B("RR E", 0x1B, 2, 8),
    RR_1C("RR H", 0x1C, 2, 8),
    RR_1D("RR L", 0x1D, 2, 8),
    RR_1E("RR (HL)", 0x1E, 2, 8),
    RR_1F("RR A", 0x1F, 2, 8),

    SLA_20("SLA B", 0x20, 2, 8),
    SLA_21("SLA C", 0x21, 2, 8),
    SLA_22("SLA D", 0x22, 2, 8),
    SLA_23("SLA E", 0x23, 2, 8),
    SLA_24("SLA H", 0x24, 2, 8),
    SLA_25("SLA L", 0x25, 2, 8),
    SLA_26("SLA (HL)", 0x26, 2, 8),
    SLA_27("SLA A", 0x27, 2, 8),
    SRA_28("SRA B", 0x28, 2, 8),
    SRA_29("SRA C", 0x29, 2, 8),
    SRA_2A("SRA D", 0x2A, 2, 8),
    SRA_2B("SRA E", 0x2B, 2, 8),
    SRA_2C("SRA H", 0x2C, 2, 8),
    SRA_2D("SRA L", 0x2D, 2, 8),
    SRA_2E("SRA (HL)", 0x2E, 2, 8),
    SRA_2F("SRA A", 0x2F, 2, 8),

    SWAP_30("SWAP B", 0x30, 2, 8),
    SWAP_31("SWAP C", 0x31, 2, 8),
    SWAP_32("SWAP D", 0x32, 2, 8),
    SWAP_33("SWAP E", 0x33, 2, 8),
    SWAP_34("SWAP H", 0x34, 2, 8),
    SWAP_35("SWAP L", 0x35, 2, 8),
    SWAP_36("SWAP (HL)", 0x36, 2, 8),
    SWAP_37("SWAP A", 0x37, 2, 8),
    SRL_38("SRL B", 0x38, 2, 8),
    SRL_39("SRL C", 0x39, 2, 8),
    SRL_3A("SRL D", 0x3A, 2, 8),
    SRL_3B("SRL E", 0x3B, 2, 8),
    SRL_3C("SRL H", 0x3C, 2, 8),
    SRL_3D("SRL L", 0x3D, 2, 8),
    SRL_3E("SRL (HL)", 0x3E, 2, 8),
    SRL_3F("SRL A", 0x3F, 2, 8),

    BIT_40("BIT 0,B", 0x40, 2, 8),
    BIT_41("BIT 0,C", 0x41, 2, 8),
    BIT_42("BIT 0,D", 0x42, 2, 8),
    BIT_43("BIT 0,E", 0x43, 2, 8),
    BIT_44("BIT 0,H", 0x44, 2, 8),
    BIT_45("BIT 0,L", 0x45, 2, 8),
    BIT_46("BIT 0,(HL)", 0x46, 2, 8),
    BIT_47("BIT 0,A", 0x47, 2, 8),
    BIT_48("BIT 1,B", 0x48, 2, 8),
    BIT_49("BIT 1,C", 0x49, 2, 8),
    BIT_4A("BIT 1,D", 0x4A, 2, 8),
    BIT_4B("BIT 1,E", 0x4B, 2, 8),
    BIT_4C("BIT 1,H", 0x4C, 2, 8),
    BIT_4D("BIT 1,L", 0x4D, 2, 8),
    BIT_4E("BIT 1,(HL)", 0x4E, 2, 8),
    BIT_4F("BIT 1,A", 0x4F, 2, 8),

    BIT_50("BIT 2,B", 0x50, 2, 8),
    BIT_51("BIT 2,C", 0x51, 2, 8),
    BIT_52("BIT 2,D", 0x52, 2, 8),
    BIT_53("BIT 2,E", 0x53, 2, 8),
    BIT_54("BIT 2,H", 0x54, 2, 8),
    BIT_55("BIT 2,L", 0x55, 2, 8),
    BIT_56("BIT 2,(HL)", 0x56, 2, 8),
    BIT_57("BIT 2,A", 0x57, 2, 8),
    BIT_58("BIT 3,B", 0x58, 2, 8),
    BIT_59("BIT 3,C", 0x59, 2, 8),
    BIT_5A("BIT 3,D", 0x5A, 2, 8),
    BIT_5B("BIT 3,E", 0x5B, 2, 8),
    BIT_5C("BIT 3,H", 0x5C, 2, 8),
    BIT_5D("BIT 3,L", 0x5D, 2, 8),
    BIT_5E("BIT 3,(HL)", 0x5E, 2, 8),
    BIT_5F("BIT 3,A", 0x5F, 2, 8),

    BIT_60("BIT 4,B", 0x60, 2, 8),
    BIT_61("BIT 4,C", 0x61, 2, 8),
    BIT_62("BIT 4,D", 0x62, 2, 8),
    BIT_63("BIT 4,E", 0x63, 2, 8),
    BIT_64("BIT 4,H", 0x64, 2, 8),
    BIT_65("BIT 4,L", 0x65, 2, 8),
    BIT_66("BIT 4,(HL)", 0x66, 2, 8),
    BIT_67("BIT 4,A", 0x67, 2, 8),
    BIT_68("BIT 5,B", 0x68, 2, 8),
    BIT_69("BIT 5,C", 0x69, 2, 8),
    BIT_6A("BIT 5,D", 0x6A, 2, 8),
    BIT_6B("BIT 5,E", 0x6B, 2, 8),
    BIT_6C("BIT 5,H", 0x6C, 2, 8),
    BIT_6D("BIT 5,L", 0x6D, 2, 8),
    BIT_6E("BIT 5,(HL)", 0x6E, 2, 8),
    BIT_6F("BIT 5,A", 0x6F, 2, 8),

    BIT_70("BIT 6,B", 0x70, 2, 8),
    BIT_71("BIT 6,C", 0x71, 2, 8),
    BIT_72("BIT 6,D", 0x72, 2, 8),
    BIT_73("BIT 6,E", 0x73, 2, 8),
    BIT_74("BIT 6,H", 0x74, 2, 8),
    BIT_75("BIT 6,L", 0x75, 2, 8),
    BIT_76("BIT 6,(HL)", 0x76, 2, 8),
    BIT_77("BIT 6,A", 0x77, 2, 8),
    BIT_78("BIT 7,B", 0x78, 2, 8),
    BIT_79("BIT 7,C", 0x79, 2, 8),
    BIT_7A("BIT 7,D", 0x7A, 2, 8),
    BIT_7B("BIT 7,E", 0x7B, 2, 8),
    BIT_7C("BIT 7,H", 0x7C, 2, 8),
    BIT_7D("BIT 7,L", 0x7D, 2, 8),
    BIT_7E("BIT 7,(HL)", 0x7E, 2, 8),
    BIT_7F("BIT 7,A", 0x7F, 2, 8),

    RES_80("RES 0,B", 0x80, 2, 8),
    RES_81("RES 0,C", 0x81, 2, 8),
    RES_82("RES 0,D", 0x82, 2, 8),
    RES_83("RES 0,E", 0x83, 2, 8),
    RES_84("RES 0,H", 0x84, 2, 8),
    RES_85("RES 0,L", 0x85, 2, 8),
    RES_86("RES 0,(HL)", 0x86, 2, 8),
    RES_87("RES 0,A", 0x87, 2, 8),
    RES_88("RES 1,B", 0x88, 2, 8),
    RES_89("RES 1,C", 0x89, 2, 8),
    RES_8A("RES 1,D", 0x8A, 2, 8),
    RES_8B("RES 1,E", 0x8B, 2, 8),
    RES_8C("RES 1,H", 0x8C, 2, 8),
    RES_8D("RES 1,L", 0x8D, 2, 8),
    RES_8E("RES 1,(HL)", 0x8E, 2, 8),
    RES_8F("RES 1,A", 0x8F, 2, 8),

    RES_90("RES 2,B", 0x90, 2, 8),
    RES_91("RES 2,C", 0x91, 2, 8),
    RES_92("RES 2,D", 0x92, 2, 8),
    RES_93("RES 2,E", 0x93, 2, 8),
    RES_94("RES 2,H", 0x94, 2, 8),
    RES_95("RES 2,L", 0x95, 2, 8),
    RES_96("RES 2,(HL)", 0x96, 2, 8),
    RES_97("RES 2,A", 0x97, 2, 8),
    RES_98("RES 3,B", 0x98, 2, 8),
    RES_99("RES 3,C", 0x99, 2, 8),
    RES_9A("RES 3,D", 0x9A, 2, 8),
    RES_9B("RES 3,E", 0x9B, 2, 8),
    RES_9C("RES 3,H", 0x9C, 2, 8),
    RES_9D("RES 3,L", 0x9D, 2, 8),
    RES_9E("RES 3,(HL)", 0x9E, 2, 8),
    RES_9F("RES 3,A", 0x9F, 2, 8),

    RES_A0("RES 4,B", 0xA0, 2, 8),
    RES_A1("RES 4,C", 0xA1, 2, 8),
    RES_A2("RES 4,D", 0xA2, 2, 8),
    RES_A3("RES 4,E", 0xA3, 2, 8),
    RES_A4("RES 4,H", 0xA4, 2, 8),
    RES_A5("RES 4,L", 0xA5, 2, 8),
    RES_A6("RES 4,(HL)", 0xA6, 2, 8),
    RES_A7("RES 4,A", 0xA7, 2, 8),
    RES_A8("RES 5,B", 0xA8, 2, 8),
    RES_A9("RES 5,C", 0xA9, 2, 8),
    RES_AA("RES 5,D", 0xAA, 2, 8),
    RES_AB("RES 5,E", 0xAB, 2, 8),
    RES_AC("RES 5,H", 0xAC, 2, 8),
    RES_AD("RES 5,L", 0xAD, 2, 8),
    RES_AE("RES 5,(HL)", 0xAE, 2, 8),
    RES_AF("RES 5,A", 0xAF, 2, 8),

    RES_B0("RES 6,B", 0xB0, 2, 8),
    RES_B1("RES 6,C", 0xB1, 2, 8),
    RES_B2("RES 6,D", 0xB2, 2, 8),
    RES_B3("RES 6,E", 0xB3, 2, 8),
    RES_B4("RES 6,H", 0xB4, 2, 8),
    RES_B5("RES 6,L", 0xB5, 2, 8),
    RES_B6("RES 6,(HL)", 0xB6, 2, 8),
    RES_B7("RES 6,A", 0xB7, 2, 8),
    RES_B8("RES 7,B", 0xB8, 2, 8),
    RES_B9("RES 7,C", 0xB9, 2, 8),
    RES_BA("RES 7,D", 0xBA, 2, 8),
    RES_BB("RES 7,E", 0xBB, 2, 8),
    RES_BC("RES 7,H", 0xBC, 2, 8),
    RES_BD("RES 7,L", 0xBD, 2, 8),
    RES_BE("RES 7,(HL)", 0xBE, 2, 8),
    RES_BF("RES 7,A", 0xBF, 2, 8),

    SET_C0("SET 0,B", 0xC0, 2, 8),
    SET_C1("SET 0,C", 0xC1, 2, 8),
    SET_C2("SET 0,D", 0xC2, 2, 8),
    SET_C3("SET 0,E", 0xC3, 2, 8),
    SET_C4("SET 0,H", 0xC4, 2, 8),
    SET_C5("SET 0,L", 0xC5, 2, 8),
    SET_C6("SET 0,(HL)", 0xC6, 2, 8),
    SET_C7("SET 0,A", 0xC7, 2, 8),
    SET_C8("SET 1,B", 0xC8, 2, 8),
    SET_C9("SET 1,C", 0xC9, 2, 8),
    SET_CA("SET 1,D", 0xCA, 2, 8),
    SET_CB("SET 1,E", 0xCB, 2, 8),
    SET_CC("SET 1,H", 0xCC, 2, 8),
    SET_CD("SET 1,L", 0xCD, 2, 8),
    SET_CE("SET 1,(HL)", 0xCE, 2, 8),
    SET_CF("SET 1,A", 0xCF, 2, 8),

    SET_D0("SET 2,B", 0xD0, 2, 8),
    SET_D1("SET 2,C", 0xD1, 2, 8),
    SET_D2("SET 2,D", 0xD2, 2, 8),
    SET_D3("SET 2,E", 0xD3, 2, 8),
    SET_D4("SET 2,H", 0xD4, 2, 8),
    SET_D5("SET 2,L", 0xD5, 2, 8),
    SET_D6("SET 2,(HL)", 0xD6, 2, 8),
    SET_D7("SET 2,A", 0xD7, 2, 8),
    SET_D8("SET 3,B", 0xD8, 2, 8),
    SET_D9("SET 3,C", 0xD9, 2, 8),
    SET_DA("SET 3,D", 0xDA, 2, 8),
    SET_DB("SET 3,E", 0xDB, 2, 8),
    SET_DC("SET 3,H", 0xDC, 2, 8),
    SET_DD("SET 3,L", 0xDD, 2, 8),
    SET_DE("SET 3,(HL)", 0xDE, 2, 8),
    SET_DF("SET 3,A", 0xDF, 2, 8),

    SET_E0("SET 4,B", 0xE0, 2, 8),
    SET_E1("SET 4,C", 0xE1, 2, 8),
    SET_E2("SET 4,D", 0xE2, 2, 8),
    SET_E3("SET 4,E", 0xE3, 2, 8),
    SET_E4("SET 4,H", 0xE4, 2, 8),
    SET_E5("SET 4,L", 0xE5, 2, 8),
    SET_E6("SET 4,(HL)", 0xE6, 2, 8),
    SET_E7("SET 4,A", 0xE7, 2, 8),
    SET_E8("SET 5,B", 0xE8, 2, 8),
    SET_E9("SET 5,C", 0xE9, 2, 8),
    SET_EA("SET 5,D", 0xEA, 2, 8),
    SET_EB("SET 5,E", 0xEB, 2, 8),
    SET_EC("SET 5,H", 0xEC, 2, 8),
    SET_ED("SET 5,L", 0xED, 2, 8),
    SET_EE("SET 5,(HL)", 0xEE, 2, 8),
    SET_EF("SET 5,A", 0xEF, 2, 8),

    SET_F0("SET 6,B", 0xF0, 2, 8),
    SET_F1("SET 6,C", 0xF1, 2, 8),
    SET_F2("SET 6,D", 0xF2, 2, 8),
    SET_F3("SET 6,E", 0xF3, 2, 8),
    SET_F4("SET 6,H", 0xF4, 2, 8),
    SET_F5("SET 6,L", 0xF5, 2, 8),
    SET_F6("SET 6,(HL)", 0xF6, 2, 8),
    SET_F7("SET 6,A", 0xF7, 2, 8),
    SET_F8("SET 7,B", 0xF8, 2, 8),
    SET_F9("SET 7,C", 0xF9, 2, 8),
    SET_FA("SET 7,D", 0xFA, 2, 8),
    SET_FB("SET 7,E", 0xFB, 2, 8),
    SET_FC("SET 7,H", 0xFC, 2, 8),
    SET_FD("SET 7,L", 0xFD, 2, 8),
    SET_FE("SET 7,(HL)", 0xFE, 2, 8),
    SET_FF("SET 7,A", 0xFF, 2, 8);

    override fun argsSize(): Int {
        return this.bytes - 2 // cb and opcode byte
    }

    override fun cycles(): Int {
        return this.cycles
    }

    override fun args(): Array<out Operand.Type> {
        return this.args
    }

    override fun toString(): String {
        return this.mnemonic
    }

    companion object {

        operator fun get(i: Int): ExtOpCode {
            return values()[i]
        }

    }

}